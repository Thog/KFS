[config]
skip_core_tasks = true

[env]
RUST_TARGET_PATH = "${PWD}"
GDB_PORT = { script = ["echo ${GDB_PORT:-9090}"] }
VNC_PORT = { script = ["echo ${VNC_PORT:-:0}"] }
CLIPPY_RULES = """
-A clippy::redundant_field_names \
-A clippy::unreadable_literal \
-A clippy::identity_op \
-A clippy::zero_prefixed_literal \
-A clippy::redundant_closure \
-W clippy::cast_possible_wrap \
-W clippy::cast_sign_loss \
-W clippy::default_trait_access \
-W clippy::explicit_into_iter_loop \
-W clippy::explicit_iter_loop \
-W clippy::missing_docs_in_private_items \
-W clippy::mut_mut \
-W clippy::replace_consts \
-W clippy::used_underscore_binding \
-W clippy::wildcard_dependencies \
-W clippy::wrong_pub_self_convention"""


[tasks.bootstrap-linker]
workspace = false
script_runner = "@shell"
script = ["cp linker-scripts/bootstrap.ld link.T"]

[tasks.kernel-linker]
workspace = false
script_runner = "@shell"
script = ["cp linker-scripts/kernel.ld    link.T"]

[tasks.install-rust-src]
install_crate = { rustup_component_name = "rust-src" }

[tasks.install-mkisofs-rs]
install_crate = { crate_name = "mkisofs-rs", binary = "mkisofs-rs", test_arg = "--help" }

[tasks.bootstrap]
workspace = false
description = "Compiles the i386 bootstrap for debug"
dependencies = ["bootstrap-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none", "--package=sunrise-bootstrap" ]

[tasks.bootstrap-release]
workspace = false
description = "Compiles the i386 bootstrap for release"
dependencies = ["bootstrap-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none", "--package=sunrise-bootstrap", "--release" ]

[tasks.kernel]
workspace = false
description = "Compiles the kernel for debug"
dependencies = ["kernel-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none", "--package=sunrise-kernel", "-Z", "package-features", "--features=panic-on-exception"]

[tasks.kernel-release]
workspace = false
description = "Compiles the kernel for release"
dependencies = ["kernel-linker", "install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none", "--package=sunrise-kernel", "--release" ]

[tasks.vi]
workspace = false
description = "Compiles sunrise-vi"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-vi"]

[tasks.vi-release]
workspace = false
description = "Compiles sunrise-vi"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-vi", "--release"]

[tasks.sm]
workspace = false
description = "Compiles sunrise-sm"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-sm"]

[tasks.sm-release]
workspace = false
description = "Compiles sunrise-sm"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-sm", "--release"]

[tasks.shell]
workspace = false
description = "Compiles sunrise-shell"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-shell"]

[tasks.shell-release]
workspace = false
description = "Compiles sunrise-shell"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-shell", "--release"]

[tasks.wall-clock]
workspace = false
description = "Compiles sunrise-wall-clock"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-wall-clock"]

[tasks.wall-clock-release]
workspace = false
description = "Compiles sunrise-wall-clock"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-wall-clock", "--release"]

[tasks.ahci]
workspace = false
description = "Compiles sunrise-ahci"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-ahci"]

[tasks.ahci-release]
workspace = false
description = "Compiles sunrise-ahci"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-ahci", "--release"]

[tasks.time]
workspace = false
description = "Compiles sunrise-time"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xrustc", "--target=i386-unknown-none-user", "--package=sunrise-time", "--", "-Zexternal-macro-backtrace"]

[tasks.time-release]
workspace = false
description = "Compiles sunrise-time"
dependencies = ["install-rust-src"]
command = "cargo"
args = ["xbuild", "--target=i386-unknown-none-user", "--package=sunrise-time", "--release"]

[tasks.userspace]
workspace = false
description = "Compiles userspace apps"
dependencies = ["shell", "wall-clock", "sm", "vi", "ahci", "time"]

[tasks.userspace-release]
workspace = false
description = "Compiles userspace apps"
dependencies = ["shell-release", "wall-clock-release", "sm-release", "vi-release", "ahci-release", "time-release"]

[tasks.iso]
workspace = false
description = "Creates a bootable ISO containing the kernel and grub."
dependencies = ["bootstrap", "kernel", "userspace", "install-mkisofs-rs"]
script_runner = "@shell"
script = [
'''
cp target/i386-unknown-none/debug/sunrise-bootstrap           isofiles/boot/
cp target/i386-unknown-none/debug/sunrise-kernel              isofiles/boot/
cp target/i386-unknown-none-user/debug/sunrise-shell          isofiles/boot/
cp target/i386-unknown-none-user/debug/sunrise-time           isofiles/boot/
cp target/i386-unknown-none-user/debug/sunrise-wall-clock     isofiles/boot/
cp target/i386-unknown-none-user/debug/sunrise-sm             isofiles/boot/
cp target/i386-unknown-none-user/debug/sunrise-vi             isofiles/boot/
cp target/i386-unknown-none-user/debug/sunrise-ahci           isofiles/boot/
mkisofs-rs external/grub/isofiles isofiles -o os.iso -b boot/grub/i386-pc/eltorito.img --no-emul-boot --boot-info-table --embedded-boot external/grub/embedded.img
'''
]

[tasks.iso-release]
workspace = false
description = "Creates a bootable ISO containing the kernel and grub."
dependencies = ["bootstrap-release", "kernel-release", "userspace-release", "install-mkisofs-rs"]
script_runner = "@shell"
script = [
'''
cp target/i386-unknown-none/release/sunrise-bootstrap           isofiles/boot/
cp target/i386-unknown-none/release/sunrise-kernel              isofiles/boot/
cp target/i386-unknown-none-user/release/sunrise-shell          isofiles/boot/
cp target/i386-unknown-none-user/release/sunrise-time           isofiles/boot/
cp target/i386-unknown-none-user/release/sunrise-wall-clock     isofiles/boot/
cp target/i386-unknown-none-user/release/sunrise-sm             isofiles/boot/
cp target/i386-unknown-none-user/release/sunrise-vi             isofiles/boot/
cp target/i386-unknown-none-user/release/sunrise-ahci           isofiles/boot/
mkisofs-rs external/grub/isofiles isofiles -o os.iso -b boot/grub/i386-pc/eltorito.img --no-emul-boot --boot-info-table --embedded-boot external/grub/embedded.img
'''
]

[tasks.disk]
workspace = false
description = "Creates an empty disk image."
command = "dd"
# 16384 = 8MiB / 512
# 512 is the block size, 8MiB is the target disk size.
args = [ "if=/dev/zero", "of=DISK.img", "count=16384", "bs=512" ]

[tasks.disk.windows]
command = "fsutil"
# Chosen by fair dice roll.
# 8388608 = 8MiB in bytes
args = [ "file", "createnew", "DISK.img", "8388608" ]

# because we can't have a dependency on a file ರ_ರ
[tasks.create-disk-if-not-exist]
workspace = false
description = "Invokes the task `disk` if DISK.img does not already exist."
condition_script = [ "[ ! -e DISK.img ]" ]
run_task = "disk"

[tasks.create-disk-if-not-exist.windows]
condition_script = [ "if exists DISK.img exit 1" ]

[tasks.qemu]
workspace = false
description = "Runs the bootable ISO in qemu."
dependencies = ["iso-release", "create-disk-if-not-exist"]
command = "qemu-system-i386"
args = [
    "-cdrom", "os.iso",
    "-serial", "stdio",
    "-vnc", "${VNC_PORT}",
    "-no-reboot",
    "-enable-kvm",
    "-drive", "id=diskA,file=DISK.img,format=raw,if=none", "-device", "ahci,id=ahci", "-device", "ide-drive,drive=diskA,bus=ahci.0",
    "-machine", "q35",
]

[tasks.qemu-debug]
workspace = false
description = "Runs the bootable ISO in qemu with gdb support"
dependencies = ["iso", "create-disk-if-not-exist"]
command = "qemu-system-i386"
args = [
    "-cdrom", "os.iso",
    "-serial", "stdio",
    "-vnc", "${VNC_PORT}",
    "-no-reboot",
    "-gdb", "tcp::${GDB_PORT}", "-S",
    "-d", "cpu_reset",
    "-drive", "id=diskA,file=DISK.img,format=raw,if=none", "-device", "ahci,id=ahci", "-device", "ide-drive,drive=diskA,bus=ahci.0",
    "-machine", "q35",
]

[tasks.doc]
workspace = false
description = "Generate the project's documentation"
env = { "RUSTDOCFLAGS" = "-Z unstable-options --enable-index-page" }
command = "cargo"
args = ["doc", "--no-deps"]

[tasks.doc-full]
workspace = false
description = "Generate the project's documentation, including private items"
env = { "RUSTDOCFLAGS" = "-Z unstable-options --enable-index-page" }
command = "cargo"
args = ["doc", "--no-deps", "--document-private-items"]

[tasks.deploy-doc]
workspace = false
install_crate = { crate_name = "cargo-travis", binary = "cargo", test_arg = ["doc-upload", "--help"] }
install_crate_args = ["--git", "https://github.com/roblabla/cargo-travis", "--rev", "doc-upload-target"]
description = "Upload this project's documentation on github pages. Should only run on CI."
command = "cargo"
args = ["doc-upload", "--clobber-index"]

[tasks.test]
workspace = false
description = "Run the tests in 32bit mode"
command = "cargo"
args = ["test", "--target=i686-unknown-linux-gnu"]

[tasks.refresh-crates]
workspace = false
description = "Make cargo-clippy work..."
command = "touch"
args = ["-c", "kernel/src/main.rs", "bootstrap/src/main.rs",
	"shell/src/main.rs", "libuser/src/lib.rs", "wall-clock/src/main.rs",
	"sm/src/main.rs", "vi/src/main.rs", "ahci/src/main.rs",
	"libutils/src/lib.rs", "libkern/src/lib.rs", "swipc-gen/src/lib.rs",
	"swipc-parser/src/lib.rs"
]

[tasks.clippy-sunrise-target]
workspace = false
description = "Run clippy on sunrise components"
dependencies = ["install-rust-src", "refresh-crates"]
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["xclippy", "--target=i386-unknown-none",
	"--all", "--exclude", "swipc-gen", "--exclude", "swipc-parser",
	"--exclude", "docs",
	"--",
	"@@split(CLIPPY_RULES, )",
	"${@}",
	]

[tasks.clippy-host-target]
workspace = false
description = "Run clippy on host components (relying on std)"
dependencies = ["install-rust-src", "refresh-crates"]
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["clippy",
	"-p", "swipc-gen", "-p", "swipc-parser", "-p", "docs",
	"--",
	"@@split(CLIPPY_RULES, )",
	"${@}",
	]

[tasks.clippy]
workspace = false
dependencies = ["clippy-host-target", "clippy-sunrise-target"]

[tasks.swipc-gen]
workspace = false
description = "Get the output of running gen_ipc on an ipcdef file"
command = "cargo"
args = ["run", "--manifest-path", "swipc-gen/Cargo.toml", "--features=binaries", "--", "${@}"]

[tasks.default]
workspace = false
run_task = "qemu"
